#!/usr/bin/env groovy

//Jenkinsfile (Declarative Pipeline)
// Where they differ however is in syntax and flexibility. Declarative limits what is available to the user with a more strict and pre-defined structure, making it an ideal choice for simpler continuous delivery pipelines. Scripted provides very few limits, insofar that the only limits on structure and syntax tend to be defined by Groovy itself, rather than any Pipeline-specific systems, making it an ideal choice for power-users and those with more complex requirements

//e5-build-gentoo-cross1
//e5-build-gentoo-x86-1
//e5-build-gentoo-x86_64-1

pipeline {
    agent none

    stages {
        stage('Build x86 GCC') {
            agent {
                label 'e5-build-gentoo-x86-1'
            }
            steps {
                sh '.ci/ci-linux-build.sh'
            }
        }
    }
    stages {
        stage('Build x86_64 GCC') {
            agent {
                label 'e5-build-gentoo-x86_64-1'
            }
            steps {
                sh '.ci/ci-linux-build.sh'
            }
        }
    }
    stages {
        stage('Build x86 Clang') {
            agent {
                label 'e5-build-gentoo-x86-1'
            }
            environment {
                CC = 'clang'
            }
            steps {
                sh '.ci/ci-linux-build.sh'
            }
        }
    }
    stages {
        stage('Build x86_64 Clang') {
            agent {
                label 'e5-build-gentoo-x86_64-1'
            }
            environment {
                CC = 'clang'
            }
            steps {
                sh '.ci/ci-linux-build.sh'
            }
        }
    }
    stages {
        stage('Build misc') {
            agent any
            steps {
                sh '.ci/ci-linux-build-misc.sh'
            }
        }
    }
    stages {
        stage('Build wayland') {
            agent any
            steps {
                sh '.ci/ci-linux-build-wayland.sh'
            }
        }
    }
}
